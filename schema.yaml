openapi: 3.0.3
info:
  title: Coderr API
  version: 1.0.0
  description: A simple API for the WebApp Coderr
paths:
  /api/base-info/:
    get:
      operationId: base_info_retrieve
      description: |-
        Retrieve general platform statistics.

        GET /base-info/

        Returns:
            JSON response with:
              - review_count: Total number of reviews.
              - average_rating: Average review score (rounded to one decimal).
              - business_profile_count: Number of business profiles.
              - offer_count: Total number of offers.
      tags:
      - base-info
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseInfo'
          description: ''
  /api/completed-order-count/{business_user_id}/:
    get:
      operationId: completed_order_count_retrieve
      description: Handles GET requests to count completed orders for a business user.
      parameters:
      - in: path
        name: business_user_id
        schema:
          type: integer
        required: true
      tags:
      - completed-order-count
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletedOrderCount'
          description: ''
  /api/login/:
    post:
      operationId: login_create
      description: Authenticates a user and returns an authentication token.
      tags:
      - login
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthToken'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthToken'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
  /api/offerdetails/{id}/:
    get:
      operationId: offerdetails_retrieve
      description: RetrieveAPIView for fetching offer detail.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - offerdetails
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferDetail'
          description: ''
  /api/offers/:
    get:
      operationId: offers_list
      description: ViewSet for handling offers.
      parameters:
      - in: query
        name: creator_id
        schema:
          type: integer
      - in: query
        name: max_delivery_time
        schema:
          type: integer
      - in: query
        name: min_price
        schema:
          type: number
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - offers
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOfferList'
          description: ''
    post:
      operationId: offers_create
      description: ViewSet for handling offers.
      tags:
      - offers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Offer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Offer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Offer'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
          description: ''
  /api/offers/{id}/:
    get:
      operationId: offers_retrieve
      description: ViewSet for handling offers.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this offer.
        required: true
      tags:
      - offers
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
          description: ''
    put:
      operationId: offers_update
      description: ViewSet for handling offers.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this offer.
        required: true
      tags:
      - offers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Offer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Offer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Offer'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
          description: ''
    patch:
      operationId: offers_partial_update
      description: ViewSet for handling offers.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this offer.
        required: true
      tags:
      - offers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOffer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOffer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOffer'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
          description: ''
    delete:
      operationId: offers_destroy
      description: ViewSet for handling offers.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this offer.
        required: true
      tags:
      - offers
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/order-count/{business_user_id}/:
    get:
      operationId: order_count_retrieve
      description: Handles GET requests to count in-progress orders for a business
        user.
      parameters:
      - in: path
        name: business_user_id
        schema:
          type: integer
        required: true
      tags:
      - order-count
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCount'
          description: ''
  /api/orders/:
    get:
      operationId: orders_list
      description: |-
        ViewSet for managing orders.
        Provides standard CRUD operations on Order objects filtered by the current authenticated customer.
        Automatically assigns the current user as the customer when creating new orders.
      tags:
      - orders
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          description: ''
    post:
      operationId: orders_create
      description: |-
        ViewSet for managing orders.
        Provides standard CRUD operations on Order objects filtered by the current authenticated customer.
        Automatically assigns the current user as the customer when creating new orders.
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/orders/{id}/:
    get:
      operationId: orders_retrieve
      description: |-
        ViewSet for managing orders.
        Provides standard CRUD operations on Order objects filtered by the current authenticated customer.
        Automatically assigns the current user as the customer when creating new orders.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - orders
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    put:
      operationId: orders_update
      description: |-
        ViewSet for managing orders.
        Provides standard CRUD operations on Order objects filtered by the current authenticated customer.
        Automatically assigns the current user as the customer when creating new orders.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    patch:
      operationId: orders_partial_update
      description: |-
        ViewSet for managing orders.
        Provides standard CRUD operations on Order objects filtered by the current authenticated customer.
        Automatically assigns the current user as the customer when creating new orders.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    delete:
      operationId: orders_destroy
      description: |-
        ViewSet for managing orders.
        Provides standard CRUD operations on Order objects filtered by the current authenticated customer.
        Automatically assigns the current user as the customer when creating new orders.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - orders
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/profile/{user}/:
    get:
      operationId: profile_retrieve
      description: |-
        Retrieve, update, or delete a user's profile.
        GET requests are allowed for any authenticated user.
        PATCH, PUT, DELETE requests require that the user is the owner or an admin.
      parameters:
      - in: path
        name: user
        schema:
          type: integer
        description: A unique value identifying this user profile.
        required: true
      tags:
      - profile
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    put:
      operationId: profile_update
      description: |-
        Retrieve, update, or delete a user's profile.
        GET requests are allowed for any authenticated user.
        PATCH, PUT, DELETE requests require that the user is the owner or an admin.
      parameters:
      - in: path
        name: user
        schema:
          type: integer
        description: A unique value identifying this user profile.
        required: true
      tags:
      - profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    patch:
      operationId: profile_partial_update
      description: |-
        Retrieve, update, or delete a user's profile.
        GET requests are allowed for any authenticated user.
        PATCH, PUT, DELETE requests require that the user is the owner or an admin.
      parameters:
      - in: path
        name: user
        schema:
          type: integer
        description: A unique value identifying this user profile.
        required: true
      tags:
      - profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    delete:
      operationId: profile_destroy
      description: |-
        Retrieve, update, or delete a user's profile.
        GET requests are allowed for any authenticated user.
        PATCH, PUT, DELETE requests require that the user is the owner or an admin.
      parameters:
      - in: path
        name: user
        schema:
          type: integer
        description: A unique value identifying this user profile.
        required: true
      tags:
      - profile
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/profiles/business/:
    get:
      operationId: profiles_business_list
      description: Lists all business user profiles.
      tags:
      - profiles
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfileBusiness'
          description: ''
  /api/profiles/customer/:
    get:
      operationId: profiles_customer_list
      description: Lists all customer user profiles.
      tags:
      - profiles
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfileCustomer'
          description: ''
  /api/registration/:
    post:
      operationId: registration_create
      description: Registers a new user and returns an authentication token.
      tags:
      - registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Registration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Registration'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
          description: ''
  /api/reviews/:
    get:
      operationId: reviews_list
      description: |-
        ViewSet for managing reviews.

        Provides list, create, retrieve, update, and delete operations.

        GET: Accessible to everyone.
        POST: Only authenticated users with a customer profile can create reviews. A user may only submit one review per business user.
        PATCH, DELETE: Only the review's creator (reviewer) or an admin may modify or delete a review.
      parameters:
      - in: query
        name: business_user_id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: reviewer_id
        schema:
          type: integer
      tags:
      - reviews
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
          description: ''
    post:
      operationId: reviews_create
      description: |-
        ViewSet for managing reviews.

        Provides list, create, retrieve, update, and delete operations.

        GET: Accessible to everyone.
        POST: Only authenticated users with a customer profile can create reviews. A user may only submit one review per business user.
        PATCH, DELETE: Only the review's creator (reviewer) or an admin may modify or delete a review.
      tags:
      - reviews
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
  /api/reviews/{id}/:
    get:
      operationId: reviews_retrieve
      description: |-
        ViewSet for managing reviews.

        Provides list, create, retrieve, update, and delete operations.

        GET: Accessible to everyone.
        POST: Only authenticated users with a customer profile can create reviews. A user may only submit one review per business user.
        PATCH, DELETE: Only the review's creator (reviewer) or an admin may modify or delete a review.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - reviews
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    put:
      operationId: reviews_update
      description: |-
        ViewSet for managing reviews.

        Provides list, create, retrieve, update, and delete operations.

        GET: Accessible to everyone.
        POST: Only authenticated users with a customer profile can create reviews. A user may only submit one review per business user.
        PATCH, DELETE: Only the review's creator (reviewer) or an admin may modify or delete a review.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - reviews
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    patch:
      operationId: reviews_partial_update
      description: |-
        ViewSet for managing reviews.

        Provides list, create, retrieve, update, and delete operations.

        GET: Accessible to everyone.
        POST: Only authenticated users with a customer profile can create reviews. A user may only submit one review per business user.
        PATCH, DELETE: Only the review's creator (reviewer) or an admin may modify or delete a review.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - reviews
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReview'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    delete:
      operationId: reviews_destroy
      description: |-
        ViewSet for managing reviews.

        Provides list, create, retrieve, update, and delete operations.

        GET: Accessible to everyone.
        POST: Only authenticated users with a customer profile can create reviews. A user may only submit one review per business user.
        PATCH, DELETE: Only the review's creator (reviewer) or an admin may modify or delete a review.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - reviews
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    AuthToken:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        token:
          type: string
          readOnly: true
      required:
      - password
      - token
      - username
    BaseInfo:
      type: object
      description: Serializer for BaseInfoView.
      properties:
        review_count:
          type: integer
        average_rating:
          type: number
          format: double
        business_profile_count:
          type: integer
        offer_count:
          type: integer
      required:
      - average_rating
      - business_profile_count
      - offer_count
      - review_count
    CompletedOrderCount:
      type: object
      description: Serializer for CompletedOrderCountView.
      properties:
        completed_order_count:
          type: integer
      required:
      - completed_order_count
    NullEnum:
      enum:
      - null
    Offer:
      type: object
      description: |-
        Serializer for the Offer model.
        The field 'details' is used for both input and output.
        On write operations, it accepts a list of detail objects.
        On read operations, the output is transformed (z.B. to only show URLs).
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        image:
          type: string
          format: uri
          nullable: true
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        details:
          type: array
          items:
            $ref: '#/components/schemas/OfferDetail'
          writeOnly: true
        min_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        min_delivery_time:
          type: integer
          readOnly: true
        user_details:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
      required:
      - created_at
      - description
      - details
      - id
      - min_delivery_time
      - min_price
      - title
      - updated_at
      - user
      - user_details
    OfferDetail:
      type: object
      description: Serializer for OfferDetail model.
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        revisions:
          type: integer
          maximum: 9223372036854775807
          minimum: -1
          format: int64
        delivery_time_in_days:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        price:
          type: number
          format: double
          maximum: 100000000
          minimum: -100000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        features: {}
        offer_type:
          $ref: '#/components/schemas/OfferTypeEnum'
      required:
      - delivery_time_in_days
      - features
      - id
      - price
      - title
    OfferTypeEnum:
      enum:
      - basic
      - standard
      - premium
      type: string
      description: |-
        * `basic` - basic
        * `standard` - standard
        * `premium` - premium
    Order:
      type: object
      description: Serializer for the Order model.
      properties:
        id:
          type: integer
          readOnly: true
        customer_user:
          type: integer
          readOnly: true
        business_user:
          type: integer
          readOnly: true
          nullable: true
        title:
          type: string
          readOnly: true
          nullable: true
        revisions:
          type: integer
          readOnly: true
          nullable: true
        delivery_time_in_days:
          type: integer
          readOnly: true
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
        features:
          readOnly: true
          nullable: true
        offer_type:
          readOnly: true
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/OfferTypeEnum'
          - $ref: '#/components/schemas/NullEnum'
        status:
          type: string
          nullable: true
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        offer_detail_id:
          type: integer
          writeOnly: true
      required:
      - business_user
      - created_at
      - customer_user
      - delivery_time_in_days
      - features
      - id
      - offer_detail_id
      - offer_type
      - price
      - revisions
      - title
      - updated_at
    OrderCount:
      type: object
      description: Serializer for OrderCountView.
      properties:
        order_count:
          type: integer
      required:
      - order_count
    PaginatedOfferList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Offer'
    PatchedOffer:
      type: object
      description: |-
        Serializer for the Offer model.
        The field 'details' is used for both input and output.
        On write operations, it accepts a list of detail objects.
        On read operations, the output is transformed (z.B. to only show URLs).
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        image:
          type: string
          format: uri
          nullable: true
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        details:
          type: array
          items:
            $ref: '#/components/schemas/OfferDetail'
          writeOnly: true
        min_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        min_delivery_time:
          type: integer
          readOnly: true
        user_details:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
    PatchedOrder:
      type: object
      description: Serializer for the Order model.
      properties:
        id:
          type: integer
          readOnly: true
        customer_user:
          type: integer
          readOnly: true
        business_user:
          type: integer
          readOnly: true
          nullable: true
        title:
          type: string
          readOnly: true
          nullable: true
        revisions:
          type: integer
          readOnly: true
          nullable: true
        delivery_time_in_days:
          type: integer
          readOnly: true
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
        features:
          readOnly: true
          nullable: true
        offer_type:
          readOnly: true
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/OfferTypeEnum'
          - $ref: '#/components/schemas/NullEnum'
        status:
          type: string
          nullable: true
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        offer_detail_id:
          type: integer
          writeOnly: true
    PatchedReview:
      type: object
      description: Serializer for the Review model.
      properties:
        id:
          type: integer
          readOnly: true
        business_user:
          type: integer
        reviewer:
          type: integer
          readOnly: true
        rating:
          type: number
          format: double
          maximum: 100
          minimum: -100
          exclusiveMaximum: true
          exclusiveMinimum: true
        description:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedUserProfile:
      type: object
      description: Serializer for detailed user profile.
      properties:
        user:
          type: integer
          readOnly: true
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        file:
          type: string
          format: uri
          nullable: true
        location:
          type: string
          nullable: true
          maxLength: 100
        tel:
          type: string
          nullable: true
          maxLength: 20
        description:
          type: string
          nullable: true
        working_hours:
          type: string
          nullable: true
          maxLength: 100
        type:
          $ref: '#/components/schemas/TypeEnum'
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time
          readOnly: true
    Registration:
      type: object
      description: Serializer for user registration.
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
          maxLength: 128
        repeated_password:
          type: string
          writeOnly: true
        type:
          allOf:
          - $ref: '#/components/schemas/TypeEnum'
          writeOnly: true
      required:
      - password
      - repeated_password
      - type
      - username
    Review:
      type: object
      description: Serializer for the Review model.
      properties:
        id:
          type: integer
          readOnly: true
        business_user:
          type: integer
        reviewer:
          type: integer
          readOnly: true
        rating:
          type: number
          format: double
          maximum: 100
          minimum: -100
          exclusiveMaximum: true
          exclusiveMinimum: true
        description:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - business_user
      - created_at
      - id
      - rating
      - reviewer
      - updated_at
    TypeEnum:
      enum:
      - business
      - customer
      type: string
      description: |-
        * `business` - business
        * `customer` - customer
    User:
      type: object
      description: Serializer for basic user information.
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - username
    UserProfile:
      type: object
      description: Serializer for detailed user profile.
      properties:
        user:
          type: integer
          readOnly: true
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        file:
          type: string
          format: uri
          nullable: true
        location:
          type: string
          nullable: true
          maxLength: 100
        tel:
          type: string
          nullable: true
          maxLength: 20
        description:
          type: string
          nullable: true
        working_hours:
          type: string
          nullable: true
          maxLength: 100
        type:
          $ref: '#/components/schemas/TypeEnum'
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - email
      - first_name
      - last_name
      - user
      - username
    UserProfileBusiness:
      type: object
      description: Serializer for business user profile.
      properties:
        pk:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
        first_name:
          type: string
          readOnly: true
        last_name:
          type: string
          readOnly: true
        file:
          type: string
          format: uri
          nullable: true
        location:
          type: string
          nullable: true
          maxLength: 100
        tel:
          type: string
          nullable: true
          maxLength: 20
        description:
          type: string
          nullable: true
        working_hours:
          type: string
          nullable: true
          maxLength: 100
        type:
          $ref: '#/components/schemas/TypeEnum'
      required:
      - first_name
      - last_name
      - pk
      - username
    UserProfileCustomer:
      type: object
      description: Serializer for customer user profile.
      properties:
        pk:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
        first_name:
          type: string
          readOnly: true
        last_name:
          type: string
          readOnly: true
        file:
          type: string
          format: uri
          nullable: true
        uploaded_at:
          type: string
          format: date-time
          nullable: true
        type:
          $ref: '#/components/schemas/TypeEnum'
      required:
      - first_name
      - last_name
      - pk
      - username
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
